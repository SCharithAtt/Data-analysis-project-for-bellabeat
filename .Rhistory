# Plot the percentages by Id
ggplot(long_dataframe, aes(x = ActivityDate, y = Percentage, color = ActivityLevel)) +
geom_line() +
facet_wrap(~ Id) +
labs(title = "Activity Level Percentages by Day",
x = "Activity Date",
y = "Percentage (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(dailyCalories)
head(dailyCalories)
head(dailyActivity)
View(dailyActivity)
# Merge the dataframes based on the specified conditions
CalorieData <- merge(dailyCalories, dailyActivity[, c("Id", "Calories", "ActivityDate")],
by.x = c("Id", "ActivityDay"),
by.y = c("Id", "ActivityDate"))
# View the resulting dataframe
head(CalorieData)
View(weightLogInfo)
# Transform the dataframe to long format for plotting
long_dataframe <- activity_percentages %>%
pivot_longer(cols = c(SedentaryPercentage, FairlyActivePercentage, VeryActivePercentage, LightlyActivePercentage),
names_to = "ActivityLevel",
values_to = "Percentage")
# Assuming dailyActivity is your original dataframe
activity_percentages <- dailyActivity %>%
mutate(TotalMinutes = VeryActiveMinutes + FairlyActiveMinutes + LightlyActiveMinutes + SedentaryMinutes) %>%
mutate(SedentaryPercentage = (SedentaryMinutes / TotalMinutes) * 100,
FairlyActivePercentage = (FairlyActiveMinutes / TotalMinutes) * 100,
VeryActivePercentage = (VeryActiveMinutes / TotalMinutes) * 100,
LightlyActivePercentage = (LightlyActiveMinutes / TotalMinutes) * 100) %>%
select(Id, ActivityDate, SedentaryPercentage, FairlyActivePercentage, VeryActivePercentage, LightlyActivePercentage)
# View the new dataframe
head(activity_percentages)
# Transform the dataframe to long format for plotting
long_dataframe <- activity_percentages %>%
pivot_longer(cols = c(SedentaryPercentage, FairlyActivePercentage, VeryActivePercentage, LightlyActivePercentage),
names_to = "ActivityLevel",
values_to = "Percentage")
# Convert ActivityDate to Date type for proper plotting
long_dataframe <- long_dataframe %>%
mutate(ActivityDate = as.Date(ActivityDate, format = "%m/%d/%Y"))
# Plot the percentages by Id
ggplot(long_dataframe, aes(x = ActivityDate, y = Percentage, color = ActivityLevel)) +
geom_line() +
facet_wrap(~ Id) +
labs(title = "Activity Level Percentages by Day - Indicator of how users spend most of their time",
x = "Activity Date",
y = "Percentage (%)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
head(weightLogInfo)
# Convert the Date column to Date type
weightLogInfo$Date <- as.Date(weightLogInfo$Date, format = "%m/%d/%Y %I:%M:%S %p")
# Group by Id and get the earliest record for each Id
earliestBMI <- weightLogInfo %>%
group_by(Id) %>%
slice_min(order_by = Date) %>%
ungroup()
# Select relevant columns
bmiData <- earliestBMI %>% select(Id, BMI)
# Define the categories
bmiData <- bmiData %>%
mutate(Category = case_when(
BMI < 18.5 ~ "Underweight",
BMI >= 18.5 & BMI < 24.9 ~ "Healthy weight",
BMI >= 25 & BMI < 29.9 ~ "Overweight",
BMI >= 30 ~ "Obese",
TRUE ~ "Unknown"
))
# Plot the BMI
ggplot(bmiData, aes(x = factor(Id), y = BMI, color = Category)) +
geom_point(size = 3) +
labs(title = "BMI of Individuals by ID",
x = "ID",
y = "BMI") +
scale_color_manual(values = c("Underweight" = "blue",
"Healthy weight" = "green",
"Overweight" = "orange",
"Obese" = "red")) +
theme_minimal() +
theme(axis.text.x = element_blank(),  # Hide x-axis labels
axis.ticks.x = element_blank())  # Hide x-axis ticks
head(dailyIntensities)
head(heartRateSeconds)
View(heartRateSeconds)
head(minuteSleep)
View(minuteSleep)
head(sleepDaily)
View(sleepDaily)
View(minuteCaloriesNarrow)
View(minuteCaloriesWide)
View(minuteIntensitiesNarrow)
View(minuteIntensitiesWide)
head(heartRateSeconds)
skim_without_charts(heartRateSeconds)
summary(heartRateSeconds)
library(lubridate)  # For handling date-time
heartRateSeconds$Time <- as.POSIXct(heartRateSeconds$Time, format = "%m/%d/%Y %I:%M:%S %p")
ggplot(heartRateSeconds, aes(x = Time, y = Value, group = Id, color = as.factor(Id))) +
geom_line(alpha = 0.5) +  # Use alpha for better visibility when multiple lines overlap
labs(title = "Heart Rate Over Time by User ID",
x = "Time",
y = "Heart Rate (BPM)",
color = "User ID") +
theme_minimal() +
theme(legend.position = "bottom")
# Set a seed for reproducibility
set.seed(123)
# Sample a fraction of the data (e.g., 1%)
sampledData <- heartRateSeconds %>%
sample_frac(0.01)
# Plot the sampled data
ggplot(sampledData, aes(x = Time, y = Value, group = Id, color = as.factor(Id))) +
geom_line(alpha = 0.5) +
labs(title = "Heart Rate Over Time (Sampled Data)",
x = "Time",
y = "Heart Rate (BPM)",
color = "User ID") +
theme_minimal() +
theme(legend.position = "bottom")
# Sample a fraction of the data (e.g., 1%)
sampledData <- heartRateSeconds %>%
sample_frac(0.01)
# Get unique user IDs
unique_ids <- unique(sampledData$Id)
# Loop through each unique ID and create a plot
for (id in unique_ids) {
# Filter data for the current ID
id_data <- sampledData %>% filter(Id == id)
# Create the plot
p <- ggplot(id_data, aes(x = Time, y = Value)) +
geom_line(alpha = 0.5) +
labs(title = paste("Heart Rate Over Time for User ID:", id),
x = "Time",
y = "Heart Rate (BPM)") +
theme_minimal()
# Save the plot as a PNG file
ggsave(filename = paste0("HeartRate_UserID_", id, ".png"), plot = p, width = 10, height = 6)
}
# Loop through each unique ID and create a plot
for (id in unique_ids) {
# Filter data for the current ID
id_data <- sampledData %>% filter(Id == id)
# Create the plot
p <- ggplot(id_data, aes(x = Time, y = Value)) +
geom_line(alpha = 0.5) +
labs(title = paste("Heart Rate Over Time for User ID:", id),
x = "Time",
y = "Heart Rate (BPM)") +
theme_minimal()
# Save the plot as a PNG file
ggsave(filename = paste0("HeartRate_UserID_", id, ".png"), plot = p, width = 10, height = 6)
}
# Get unique user IDs
unique_ids <- unique(sampledData$Id)
# Create the line plot with facets for each user ID
ggplot(sampledData, aes(x = Time, y = Value)) +
geom_line(alpha = 0.5) +
labs(title = "Heart Rate Over Time (Sampled Data)",
x = "Time",
y = "Heart Rate (BPM)") +
facet_wrap(~ Id, scales = "free_y") +  # Create separate plots for each ID
theme_minimal() +
theme(legend.position = "none")  # Remove legend
# Calculate mean heart rate for each user
meanHeartRate <- heartRateSeconds %>%
group_by(Id) %>%
summarize(MeanHeartRate = mean(Value, na.rm = TRUE), .groups = 'drop')
# Create the bar chart
ggplot(meanHeartRate, aes(x = factor(Id), y = MeanHeartRate)) +
geom_bar(stat = "identity", fill = "skyblue") +
geom_hline(yintercept = 60, linetype = "dashed", color = "green") +
geom_hline(yintercept = 100, linetype = "dashed", color = "red") +
labs(title = "Mean Heart Rate by User ID",
x = "User ID",
y = "Mean Heart Rate (BPM)",
caption = "Dashed lines represent healthy heart rate range (60-100 BPM)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calculate variance of heart rate for each user
varianceHeartRate <- heartRateSeconds %>%
group_by(Id) %>%
summarize(VarianceHeartRate = var(Value, na.rm = TRUE), .groups = 'drop')
healthyPoint <- 80
varianceHeartRate <- varianceHeartRate %>%
mutate(VarianceFromHealthy = abs(VarianceHeartRate - healthyPoint))
# Create the bar chart
ggplot(varianceHeartRate, aes(x = factor(Id), y = VarianceFromHealthy)) +
geom_bar(stat = "identity", fill = "lightcoral") +
labs(title = "Variance of Heart Rate from Healthy Point (80 BPM) by User ID",
x = "User ID",
y = "Variance from Healthy Point (BPM)") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
head(sleepDaily)
summary(sleepDaily)
skim_without_charts(sleepDaily)
head(sleepDaily)
summary(sleepDaily)
skim_without_charts(sleepDaily)
# Reshape the data
sleepDataLong <- sleepDaily %>%
group_by(Id) %>%
summarize(TotalTimeInBed = sum(TotalTimeInBed), TotalMinutesAsleep = sum(TotalMinutesAsleep), .groups = 'drop') %>%
pivot_longer(cols = c(TotalTimeInBed, TotalMinutesAsleep),
names_to = "TimeType",
values_to = "Minutes")
# Create the bar chart
ggplot(sleepDataLong, aes(x = Id, y = Minutes, fill = TimeType)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Time in Bed vs Time Spent Sleeping by User ID",
x = "User ID",
y = "Minutes",
fill = "Time Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calculate average values
averageSleep <- sleepDaily %>%
summarize(AverageSleep = mean(TotalMinutesAsleep),
AverageTimeInBed = mean(TotalTimeInBed),
AverageAwakeTime = mean(TotalTimeInBed - TotalMinutesAsleep)) %>%
pivot_longer(cols = everything(), names_to = "Category", values_to = "Minutes")
# Create the pie chart
ggplot(averageSleep, aes(x = "", y = Minutes, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Average Time Sleeping vs Time Awake in Bed",
fill = "Category") +
theme_minimal() +
theme(axis.text.x = element_blank())  # Remove x-axis text
#Sleep data
# Reshape the data
sleepDataLong <- sleepDaily %>%
group_by(Id) %>%
summarize(TotalTimeInBed = sum(TotalTimeInBed), TotalMinutesAsleep = sum(TotalMinutesAsleep), .groups = 'drop') %>%
pivot_longer(cols = c(TotalTimeInBed, TotalMinutesAsleep),
names_to = "TimeType",
values_to = "Minutes")
# Create the bar chart
ggplot(sleepDataLong, aes(x = Id, y = Minutes, fill = TimeType)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Time in Bed vs Time Spent Sleeping by User ID",
x = "User ID",
y = "Minutes",
fill = "Time Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calculate average values
averageSleep <- sleepDaily %>%
summarize(AverageSleep = mean(TotalMinutesAsleep),
AverageTimeInBed = mean(TotalTimeInBed),
AverageAwakeTime = mean(TotalTimeInBed - TotalMinutesAsleep)) %>%
pivot_longer(cols = everything(), names_to = "Category", values_to = "Minutes")
# Create the pie chart
ggplot(averageSleep, aes(x = "", y = Minutes, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Average Time Sleeping vs Time Awake in Bed",
fill = "Category") +
theme_minimal() +
theme(axis.text.x = element_blank())  # Remove x-axis text
#Sleep data
# Reshape the data
sleepDataLong <- sleepDaily %>%
group_by(Id) %>%
summarize(TotalTimeInBed = sum(TotalTimeInBed), TotalMinutesAsleep = sum(TotalMinutesAsleep), .groups = 'drop') %>%
pivot_longer(cols = c(TotalTimeInBed, TotalMinutesAsleep),
names_to = "TimeType",
values_to = "Minutes")
# Create the bar chart
ggplot(sleepDataLong, aes(x = Id, y = Minutes, fill = TimeType)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Time in Bed vs Time Spent Sleeping by User ID",
x = "User ID",
y = "Minutes",
fill = "Time Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calculate average values
averageSleep <- sleepDaily %>%
summarize(AverageSleep = mean(TotalMinutesAsleep),
AverageTimeInBed = mean(TotalTimeInBed),
AverageAwakeTime = mean(TotalTimeInBed - TotalMinutesAsleep)) %>%
pivot_longer(cols = everything(), names_to = "Category", values_to = "Minutes")
# Create the pie chart
ggplot(averageSleep, aes(x = "", y = Minutes, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Average Time Sleeping vs Time Awake in Bed",
fill = "Category") +
theme_minimal() +
theme(axis.text.x = element_blank())  # Remove x-axis text
# Reshape the data for the bar chart
sleepDataLong <- sleepDaily %>%
group_by(Id) %>%
summarize(TotalTimeInBed = sum(TotalTimeInBed),
TotalMinutesAsleep = sum(TotalMinutesAsleep),
.groups = 'drop') %>%
pivot_longer(cols = c(TotalTimeInBed, TotalMinutesAsleep),
names_to = "TimeType",
values_to = "Minutes")
# Create the bar chart with thicker bars and TotalMinutesAsleep on top
ggplot(sleepDataLong, aes(x = Id, y = Minutes, fill = TimeType)) +
geom_bar(stat = "identity", position = "identity", width = 0.7) +  # Adjust width for thicker bars
geom_bar(data = sleepDataLong %>% filter(TimeType == "TotalMinutesAsleep"),
aes(y = Minutes),
stat = "identity",
fill = "skyblue",
position = "identity") +  # Add TotalMinutesAsleep on top
labs(title = "Time in Bed vs Time Spent Sleeping by User ID",
x = "User ID",
y = "Minutes",
fill = "Time Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calculate average sleep values for the pie chart
averageSleep <- sleepDaily %>%
summarize(AverageSleep = mean(TotalMinutesAsleep),
AverageTimeInBed = mean(TotalTimeInBed),
AverageAwakeTime = mean(TotalTimeInBed - TotalMinutesAsleep)) %>%
select(AverageSleep, AverageAwakeTime) %>%
pivot_longer(cols = everything(), names_to = "Category", values_to = "Minutes")
# Create the pie chart for Time Spent Asleep and Time Spent Awake
ggplot(averageSleep, aes(x = "", y = Minutes, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Average Time Sleeping vs Time Awake",
fill = "Category") +
theme_minimal() +
theme(axis.text.x = element_blank())  # Remove x-axis text
# Reshape the data for the bar chart
sleepDataLong <- sleepDaily %>%
group_by(Id) %>%
summarize(TotalTimeInBed = sum(TotalTimeInBed),
TotalMinutesAsleep = sum(TotalMinutesAsleep),
.groups = 'drop') %>%
pivot_longer(cols = c(TotalTimeInBed, TotalMinutesAsleep),
names_to = "TimeType",
values_to = "Minutes")
# Create the bar chart with thicker bars and TotalMinutesAsleep on top
ggplot(sleepDataLong, aes(x = Id, y = Minutes, fill = TimeType)) +
geom_bar(stat = "identity", position = "identity", width = 0.7) +  # Adjust width for thicker bars
geom_bar(data = sleepDataLong %>% filter(TimeType == "TotalMinutesAsleep"),
aes(y = Minutes),
stat = "identity",
fill = "skyblue",
position = "identity") +  # Add TotalMinutesAsleep on top
labs(title = "Time in Bed vs Time Spent Sleeping by User ID",
x = "User ID",
y = "Minutes",
fill = "Time Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calculate average sleep values for the pie chart
averageSleep <- sleepDaily %>%
summarize(AverageSleep = mean(TotalMinutesAsleep),
AverageTimeInBed = mean(TotalTimeInBed),
AverageAwakeTime = mean(TotalTimeInBed - TotalMinutesAsleep)) %>%
select(AverageSleep, AverageAwakeTime) %>%
pivot_longer(cols = everything(), names_to = "Category", values_to = "Minutes") %>%
mutate(Percentage = Minutes / sum(Minutes) * 100)  # Calculate percentages
# Create the pie chart for Time Spent Asleep and Time Spent Awake with percentages
ggplot(averageSleep, aes(x = "", y = Minutes, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Average Time Sleeping vs Time Awake",
fill = "Category") +
theme_minimal() +
theme(axis.text.x = element_blank()) +  # Remove x-axis text
geom_text(aes(label = paste0(round(Percentage, 1), "%")),
position = position_stack(vjust = 0.5))  # Add percentage labels
# Reshape the data for the bar chart
sleepDataLong <- sleepDaily %>%
group_by(Id) %>%
summarize(TotalTimeInBed = sum(TotalTimeInBed),
TotalMinutesAsleep = sum(TotalMinutesAsleep),
.groups = 'drop')
# Create the bar chart with overlapping bars
ggplot(sleepDataLong, aes(x = Id)) +
geom_bar(aes(y = TotalTimeInBed),
stat = "identity",
fill = "orange",
width = 0.7) +  # Time in Bed
geom_bar(aes(y = TotalMinutesAsleep),
stat = "identity",
fill = "green",
width = 0.7) +  # Time Asleep
labs(title = "Time in Bed vs Time Spent Sleeping by User ID",
x = "User ID",
y = "Minutes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(expand = expansion(mult = c(0, 0.1)))  # Adjust y-axis expansion for clarity
# Reshape the data for the bar chart
sleepDataLong <- sleepDaily %>%
group_by(Id) %>%
summarize(TotalTimeInBed = sum(TotalTimeInBed),
TotalMinutesAsleep = sum(TotalMinutesAsleep),
.groups = 'drop')
# Create the bar chart with overlapping bars
ggplot(sleepDataLong, aes(x = Id)) +
geom_bar(aes(y = TotalTimeInBed),
stat = "identity",
fill = "orange",
width = 0.7) +  # Time in Bed
geom_bar(aes(y = TotalMinutesAsleep),
stat = "identity",
fill = "green",
width = 0.7) +  # Time Asleep
labs(title = "Time in Bed vs Time Spent Sleeping by User ID",
x = "User ID",
y = "Minutes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
scale_y_continuous(expand = expansion(mult = c(0, 0.1)))  # Adjust y-axis expansion for clarity
# Reshape the data for the bar chart
sleepDataLong <- sleepDaily %>%
group_by(Id) %>%
summarize(TotalTimeInBed = sum(TotalTimeInBed),
TotalMinutesAsleep = sum(TotalMinutesAsleep),
.groups = 'drop') %>%
pivot_longer(cols = c(TotalTimeInBed, TotalMinutesAsleep),
names_to = "TimeType",
values_to = "Minutes")
# Create the bar chart with thicker bars and TotalMinutesAsleep on top
ggplot(sleepDataLong, aes(x = Id, y = Minutes, fill = TimeType)) +
geom_bar(stat = "identity", position = "identity", width = 0.7) +  # Adjust width for thicker bars
geom_bar(data = sleepDataLong %>% filter(TimeType == "TotalMinutesAsleep"),
aes(y = Minutes),
stat = "identity",
fill = "skyblue",
position = "identity") +  # Add TotalMinutesAsleep on top
labs(title = "Time in Bed vs Time Spent Sleeping by User ID",
x = "User ID",
y = "Minutes",
fill = "Time Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Reshape the data for the bar chart
sleepDataLong <- sleepDaily %>%
group_by(Id) %>%
summarize(TotalTimeInBed = sum(TotalTimeInBed),
TotalMinutesAsleep = sum(TotalMinutesAsleep),
.groups = 'drop') %>%
pivot_longer(cols = c(TotalTimeInBed, TotalMinutesAsleep),
names_to = "TimeType",
values_to = "Minutes")
# Create the bar chart with thicker bars and TotalMinutesAsleep on top
ggplot(sleepDataLong, aes(x = Id, y = Minutes, fill = TimeType)) +
geom_bar(stat = "identity", position = "identity", width = 0.7) +  # Adjust width for thicker bars
geom_bar(data = sleepDataLong %>% filter(TimeType == "TotalMinutesAsleep"),
aes(y = Minutes),
stat = "identity",
fill = "skyblue",
position = "identity") +  # Add TotalMinutesAsleep on top
labs(title = "Time in Bed vs Time Spent Sleeping by User ID",
x = "User ID",
y = "Minutes",
fill = "Time Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calculate average sleep values for the pie chart
averageSleep <- sleepDaily %>%
summarize(AverageSleep = mean(TotalMinutesAsleep),
AverageTimeInBed = mean(TotalTimeInBed),
AverageAwakeTime = mean(TotalTimeInBed - TotalMinutesAsleep)) %>%
select(AverageSleep, AverageAwakeTime) %>%
pivot_longer(cols = everything(), names_to = "Category", values_to = "Minutes")
# Create the pie chart for Time Spent Asleep and Time Spent Awake
ggplot(averageSleep, aes(x = "", y = Minutes, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Average Time Sleeping vs Time Awake",
fill = "Category") +
theme_minimal() +
theme(axis.text.x = element_blank())  # Remove x-axis text
# Reshape the data
sleepDataLong <- sleepDaily %>%
group_by(Id) %>%
summarize(TotalTimeInBed = sum(TotalTimeInBed), TotalMinutesAsleep = sum(TotalMinutesAsleep), .groups = 'drop') %>%
pivot_longer(cols = c(TotalTimeInBed, TotalMinutesAsleep),
names_to = "TimeType",
values_to = "Minutes")
# Create the bar chart
ggplot(sleepDataLong, aes(x = Id, y = Minutes, fill = TimeType)) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Time in Bed vs Time Spent Sleeping by User ID",
x = "User ID",
y = "Minutes",
fill = "Time Type") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Calculate average sleep values for the pie chart
averageSleep <- sleepDaily %>%
summarize(AverageSleep = mean(TotalMinutesAsleep),
AverageTimeInBed = mean(TotalTimeInBed),
AverageAwakeTime = mean(TotalTimeInBed - TotalMinutesAsleep)) %>%
select(AverageSleep, AverageAwakeTime) %>%
pivot_longer(cols = everything(), names_to = "Category", values_to = "Minutes") %>%
mutate(Percentage = Minutes / sum(Minutes) * 100)  # Calculate percentages
# Create the pie chart for Time Spent Asleep and Time Spent Awake with percentages
ggplot(averageSleep, aes(x = "", y = Minutes, fill = Category)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Average Time Sleeping vs Time Awake",
fill = "Category") +
theme_minimal() +
theme(axis.text.x = element_blank()) +  # Remove x-axis text
geom_text(aes(label = paste0(round(Percentage, 1), "%")),
position = position_stack(vjust = 0.5))  # Add percentage labels
